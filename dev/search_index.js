var documenterSearchIndex = {"docs":
[{"location":"example workflow/#Example-Workflow","page":"Example Workflow","title":"Example Workflow","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"As the name might suggest, structures can be created and analyzed with fair ease, with each problem being started with","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"using SimpleStatics\nmy_setup = StaticSetup()","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"creating an empty statics problem which can then be filled with members, joints, forces, etc.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Lets create a simple truss to analyze. ","category":"page"},{"location":"example workflow/#.-Add-Joints","page":"Example Workflow","title":"1. Add Joints","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"First, we need to add some joints. Joints act as terminals to members, which we will add in the next step. They also need constraints to dictate their movement behavior. By default, they are assigned NoConstraint(). For our first joint, which we want to keep fixed in place, we'll give it an AnchorConstraint().","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"We can add joints using the add_joint!(setup, x, y, constraint) method, which will return the index of the joint that was created. In this case, since we don't have too many joints to add, we can simply assign them to individual variables.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"tip: Visualizing your progress\nYou can look at what you've created at any point by calling the plot_setup(::StaticSetup) function on your setup! Below we will use this to see what we've created in our example workflow. The use of this function is shown in step 1, but is hidden in future steps. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"j1 = add_joint!(my_setup, 0, 0, AnchorConstraint())\nj2 = add_joint!(my_setup, 1, 0)\nj3 = add_joint!(my_setup, 1, 1)\nj4 = add_joint!(my_setup, 2, 0)\nj5 = add_joint!(my_setup, 2, 1)\nj6 = add_joint!(my_setup, 3, 0)\nj7 = add_joint!(my_setup, 3, 1)\nj8 = add_joint!(my_setup, 4, 0)\n\nplot_setup(my_setup)","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Notice the following","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Joint 1 was given an AnchorConstraint() which will keep it fixed in place. \nPoints were automatically labeled in the order they were created. \nConstraints were depicted in green denoting the kind of motion allowed for the joint. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"If we want to modify constraints after the joint was already added, we can do so using the set_constraint! function. Lets add an XRollerConstraint() to J8, as we want it to stay fixed on the Y axis, but be allowed to move along the X axis.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"set_constraint!(my_setup, j8, XRollerConstraint())\n\nplot_setup(my_setup) # hide","category":"page"},{"location":"example workflow/#.-Add-Members","page":"Example Workflow","title":"2. Add Members","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Now we need to connect our joints via members. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Similar to how a joint 's behavior is controlled by its constraint, a member's behavior is controlled by its material, these are accessed via the Materials submodule. Members have a default for this as well: A PerfectMaterial(), which is a very thick material with a tensile strength a few orders higher than that of Tungsten, the strongest rote metal. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Lets use standard 2x4 lumber for our truss structure.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"m = Materials.Pine2x4()","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"We can now add members using the add_member!(setup, j1, j2, material) function. This function will also return an identifier for each member that could be used to refer to them later on, but since we don't need to do anything directly to them after this, we don't need to assign them to anything. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Lets set up a more proper-looking truss. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"add_member!(my_setup, j1, j2, m)\nadd_member!(my_setup, j1, j3, m)\nadd_member!(my_setup, j2, j3, m)\nadd_member!(my_setup, j2, j4, m)\nadd_member!(my_setup, j3, j4, m)\nadd_member!(my_setup, j3, j5, m)\nadd_member!(my_setup, j4, j5, m)\nadd_member!(my_setup, j4, j6, m)\nadd_member!(my_setup, j5, j6, m)\nadd_member!(my_setup, j5, j7, m)\nadd_member!(my_setup, j6, j7, m)\nadd_member!(my_setup, j6, j8, m)\nadd_member!(my_setup, j7, j8, m)\nplot_setup(my_setup) # hide","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Whew! That was a lot of members. This can be tedious, but it's a necessary step in creating our masterpiece. Looking at the result immediately shows us the fruits of our labor, as we now have a very nice looking structure. ","category":"page"},{"location":"example workflow/#.-Add-Forces","page":"Example Workflow","title":"3. Add Forces","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"This truss isn't very useful to us unless we understand more about how it handles loads! ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"We can add forces to joints by using the set_force!(setup, j, fx, fy) function. Lets add a 50lbf (222411N) load directly on the top of the truss, which would be at J5 in the -Y direction. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"set_force!(my_setup, j5, 0, -222.411)\nplot_setup(my_setup) # hide","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Now we can see a very nice pink arrow depicting our force and how it's acting on our structure!","category":"page"},{"location":"example workflow/#.-Calculate-Displacements","page":"Example Workflow","title":"4. Calculate Displacements","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"After completing step 3, we've fully defined a statics problem. Now the question is: What can we actually do with it? The first question is generally centered around how the forces acting on the truss deforms it, which we can easily calculate using the solve_displacements(setup) function!","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"tip: Joint indices match displacements\nThe displacements we get out of this funciton will follow the same order as the joints we created, so we can see the displacement that happened to J5, we simply access it in the calculated displacements using j5. We can also access each component of the displacements via displacement[idx].x or -.y if needed. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"displacements = solve_displacements(my_setup)\ndisplacements[j5]","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"It looks like J5 moved down by about 34times10^-5m or 000137. This certainly isn't a lot. Let see what happened visually as well to confirm this for all of our points!","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"This time our plot_setup function will need to have the displacements data as well to be able to show us what actually happened. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"plot_setup(my_setup, displacements=displacements)","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Members are now displayed in green to show us the displaced structure, and sure enough, none of the points really moved. Lets try adding a few thousand more pounds to J5 and seeing what happens.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"set_force!(my_setup, j5, 0, -22241.11) # about 5000 pounds force. \ndisplacements = solve_displacements(my_setup)\ndisplacements[j5]","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"plot_setup(my_setup, displacements=displacements) # hide","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Hmm... we're applying 5k lbf and only seeing about 04 of sag? That doesn't sound right. Surely 2x4 lumber isn't that strong? There's good news and bad news here. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Good news: The 2x4 lumber you built your truss with is absolutely that strong.\nBad news: The screws you used to hold them together were not. ","category":"page"},{"location":"example workflow/#.-Calculate-Member-Forces","page":"Example Workflow","title":"5. Calculate Member Forces","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Okay, so how do we solve this?  Let's say a standard deck screw can hold 100lbf (444822N)  comfortably before it shears, and we use two screws per board, getting about 850N (conservatively) of force that each board (member) can handle before it breaks. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"We can calculate the force each board is under with the solve_member_forces(setup, displacements) function. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"tip: Remember, plot_setup is your friend!\nWe can also pass the result of solve_member_forces into our plot_setup function using the member_forces keyword! Though these will only be visible if displacements are also present. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"member_forces = solve_member_forces(my_setup, displacements)\nmaximum(member_forces), minimum(member_forces) # in Newtons","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"First and foremost we notice that, as expected, our truss will be destroyed ten times over given the maximum force on the members. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"note: Sign conventions are important!\nConventionally, negative forces indicate tension and positive forces indicate compression. This signage is arbitrary, but it's what was chosen for this library.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Lets switch back to our 50lbf setup and check the maximum member force to see if we can at least bear that load without the risk of failure.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"set_force!(my_setup, j5, 0, -222.411) # about 50 pounds force. \ndisplacements = solve_displacements(my_setup)\nmember_forces = solve_member_forces(my_setup, displacements)","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"plot_setup(my_setup, displacements=displacements, member_forces=member_forces) # hide","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Now we have some interesting results! Lets go over them, noting that compressive forces are shown in red and tensile forces in blue. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Notice that M3 and M11 are so-called zero force members. These members technically don't bear any load, but are necessary to constrain the system of equations that our setup has generated.\nM6 and M8 have equal and opposite forces equal to the load on J5, whereas M9 and M10, as well as M4 and M5 are much lower, due to the load being distributed (unevenly) between the two. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"What will happen if we modify our truss slightly by recreating it with a member from J4 to J7 rather than J5 to J6. ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"    my_setup = StaticSetup()\n    j1 = add_joint!(my_setup, 0, 0, AnchorConstraint())\n    # ...\n    j2 = add_joint!(my_setup, 1, 0) # hide\n    j3 = add_joint!(my_setup, 1, 1) # hide\n    j4 = add_joint!(my_setup, 2, 0) # hide\n    j5 = add_joint!(my_setup, 2, 1) # hide\n    j6 = add_joint!(my_setup, 3, 0) # hide\n    j7 = add_joint!(my_setup, 3, 1) # hide\n    j8 = add_joint!(my_setup, 4, 0, XRollerConstraint()) # hide\n    add_member!(my_setup, j1, j2, m) # hide\n    add_member!(my_setup, j1, j3, m) # hide\n    add_member!(my_setup, j2, j3, m) # hide\n    add_member!(my_setup, j2, j4, m) # hide\n    add_member!(my_setup, j3, j4, m) # hide\n    add_member!(my_setup, j3, j5, m) # hide\n    add_member!(my_setup, j4, j5, m) # hide\n    add_member!(my_setup, j4, j6, m) # hide\n    add_member!(my_setup, j4, j7, m) # hide\n    add_member!(my_setup, j5, j7, m) # hide\n    add_member!(my_setup, j6, j7, m) # hide\n    add_member!(my_setup, j6, j8, m) # hide\n    add_member!(my_setup, j7, j8, m) # hide\n    set_force!(my_setup, j5, 0, -222.411)\n    displacements = solve_displacements(my_setup)\n    member_forces = solve_member_forces(my_setup, displacements)","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"plot_setup(my_setup, displacements=displacements, member_forces=member_forces) # hide","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"Apparently nothing good, as now one extra member is under a significantly higher load. What if we add a few extra cross members? ","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"    add_member!(my_setup, j2, j5, m) \n    add_member!(my_setup, j5, j6, m) \n    displacements = solve_displacements(my_setup)\n    member_forces = solve_member_forces(my_setup, displacements)\n    maximum(member_forces), minimum(member_forces)","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"plot_setup(my_setup, displacements=displacements, member_forces=member_forces) # hide","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"The result is a bit messy, but it looks like the maximum member force was reduced!","category":"page"},{"location":"example workflow/#.-Calculate-Reaction-Forces","page":"Example Workflow","title":"6. Calculate Reaction Forces","text":"","category":"section"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"We can see how these forces are affecting our constraints by using the solve_reaction_forces(setup, displacements) function, then passing in the result to our plot_setup function with the reactions keyword.","category":"page"},{"location":"example workflow/","page":"Example Workflow","title":"Example Workflow","text":"    reaction_forces = solve_reaction_forces(my_setup, displacements)\n    plot_setup(my_setup, displacements=displacements, member_forces=member_forces, reactions=reaction_forces)","category":"page"},{"location":"examples/example1/#Example-1-Mild-Steel-Warren-Truss","page":"Example 1","title":"Example 1 - Mild Steel Warren Truss","text":"","category":"section"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"In this example, we're going to play around with a few design parameters for a Warren-like steel truss with verticals, where we want to see what size of materials we can get away with in certain sections of the truss in order to minimize the cost. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"We will do this by:","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Making a function that will generate a truss based on a few parameters.\nGenerating a number of trusses with a certain load and analyzing it.\nViewing stresses and finding structural weak points.\nSeeing what happens under extreme loads.","category":"page"},{"location":"examples/example1/#d1_part1","page":"Example 1","title":"1. Making the setup function","text":"","category":"section"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"The first thing we need to do is make a function that will generate a truss for us, given a few parameters. Here, we'll focus on making the function build_truss, where the number of cross member sections (n), the width, height, and top load will be considered. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"We will start by making the geometry of the system. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"using SimpleStatics\n\nwidth = (23 * 12 + 10) * 0.0254 # 23', 10\" long -> Meters\nheight = 18 * 0.0254 # 18\" tall -> Meters\nnothing # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"I'll introduce this function all at once, but we'll go over every part in detail after that!","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"function build_truss(width_m, height_m, n, top_load = 0; \n    thick_material=Materials.SquareTubing(Materials.MildSteel, 1.5 * 0.0381, 1.897 / 1000),   # 1.5\" steel tubing with 14 gauge thickness\n    medium_material=Materials.SquareTubing(Materials.MildSteel, 1.0 * 0.0381, 1.518 / 1000),  # 1.0\" steel tubing with 16 gauge thickness\n    thin_material=Materials.SquareTubing(Materials.MildSteel, 0.75 * 0.0381, 1.518 / 1000)    # .75\" steel tubing with 16 gauge thickness\n    )\n\n    s = StaticSetup()\n    \n    m = width_m / (2*n)\n    \n    top_joint_indices = []\n    for m in range(0, width_m, 2n + 1)\n        j = add_joint!(s, m, height_m)\n        push!(top_joint_indices, j)\n    end\n    \n    bottom_joint_indices = []\n    for m in range(m, width_m - m, n)\n        j = add_joint!(s, m, 0)\n        push!(bottom_joint_indices, j)\n    end\n    \n    top_bar_members = []\n    for i in top_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(top_bar_members, m, thick_material)\n    end\n\n    bottom_bar_members = []\n    for i in bottom_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(bottom_bar_members, m, medium_material)\n    end\n\n    cross_members = []\n    for i in 1:n\n        for j in -1:1\n            m = add_member!(s, bottom_joint_indices[i], top_joint_indices[2*i + j], thin_material)\n            push!(cross_members, m)\n        end\n    end\n    set_constraint!(s, top_joint_indices[1], AnchorConstraint())\n    set_constraint!(s, top_joint_indices[end], XRollerConstraint())\n    \n    SimpleStatics.add_member_weights!(s)\n    # add_force!(s, top_joint_indices[n+1], 0, -top_load) # middle of top bar\n    for i in top_joint_indices\n        add_force!(s, i, 0, -top_load/length(top_joint_indices)) \n    end\n    return s\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"So that was a bit of code to chew on all at once. Before we pick this apart, lets just take a look at what this function creates with n=3 to make sure that it works.","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(build_truss(width, height, 3), dsize=1500)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"So, in this function we start by defining some materials and dimensions, as well as the number of cross member repeat units n and the top_load that will be distributed over our truss itself. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"function build_truss(width_m, height_m, n, top_load = 0; \n    thick_material=Materials.SquareTubing(Materials.MildSteel, 1.5 * 0.0381, 1.897 / 1000),   # 1.5\" steel tubing with 14 gauge thickness\n    medium_material=Materials.SquareTubing(Materials.MildSteel, 1.0 * 0.0381, 1.518 / 1000),  # 1.0\" steel tubing with 16 gauge thickness\n    thin_material=Materials.SquareTubing(Materials.MildSteel, 0.75 * 0.0381, 1.518 / 1000)    # .75\" steel tubing with 16 gauge thickness\n    )","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Then, we start initialize our setup and define segment_length, or the length of each member of the top bar in the truss. A truss with n repeats will have 2n+1 joints in its top bar.","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"s = StaticSetup()\n    \nsegment_len = width_m / (2*n)\n\ntop_joint_indices = []\nfor m in range(0, width_m, 2n + 1)\n    j = add_joint!(s, m, height_m)\n    push!(top_joint_indices, j)\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"And n joints at the bottom bar, which is two segment_lengths shorter than the top bar, so we have to shift the starting joint in by a segment_length and stop one segment_length early. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"bottom_joint_indices = []\nfor m in range(segment_len, width_m - segment_len, n)\n    j = add_joint!(s, m, 0)\n    push!(bottom_joint_indices, j)\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"We can then connect all the top and bottom truss members, recording their indexes while doing so.","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"top_bar_members = []\nfor i in top_joint_indices[1:end-1]\n    m = add_member!(s, i, i+1)\n    push!(top_bar_members, m, thick_material)\nend\n\nbottom_bar_members = []\nfor i in bottom_joint_indices[1:end-1]\n    m = add_member!(s, i, i+1)\n    push!(bottom_bar_members, m, medium_material)\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"We can visualize what we've created so far with our plot_setup(setup) function","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"function build_truss(width_m, height_m, n, top_load = 0; \n    thick_material=Materials.SquareTubing(Materials.MildSteel, 1.5 * 0.0381, 1.897 / 1000),   # 1.5\" steel tubing with 14 gauge thickness\n    medium_material=Materials.SquareTubing(Materials.MildSteel, 1.0 * 0.0381, 1.518 / 1000),  # 1.0\" steel tubing with 16 gauge thickness\n    thin_material=Materials.SquareTubing(Materials.MildSteel, 0.75 * 0.0381, 1.518 / 1000)    # .75\" steel tubing with 16 gauge thickness\n    )\n\n    s = StaticSetup()\n    \n    segment_len = width_m / (2*n)\n    \n    top_joint_indices = []\n    for m in range(0, width_m, 2n + 1)\n        j = add_joint!(s, m, height_m)\n        push!(top_joint_indices, j)\n    end\n    \n    bottom_joint_indices = []\n    for m in range(segment_len, width_m - segment_len, n)\n        j = add_joint!(s, m, 0)\n        push!(bottom_joint_indices, j)\n    end\n    \n    top_bar_members = []\n    for i in top_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(top_bar_members, m, thick_material)\n    end\n\n    bottom_bar_members = []\n    for i in bottom_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(bottom_bar_members, m, medium_material)\n    end\n    return s\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"truss = build_truss(width, height, 3)\nplot_setup(truss)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Looks good so far! For the cross members, we want each bottom member to connect to its respective closest three top members.","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"cross_members = []\nfor i in 1:n\n    for j in -1:1\n        m = add_member!(s, bottom_joint_indices[i], top_joint_indices[2*i + j], thin_material)\n        push!(cross_members, m)\n    end\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Lets see how this looks now. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"function build_truss(width_m, height_m, n, top_load = 0; \n    thick_material=Materials.SquareTubing(Materials.MildSteel, 1.5 * 0.0381, 1.897 / 1000),   # 1.5\" steel tubing with 14 gauge thickness\n    medium_material=Materials.SquareTubing(Materials.MildSteel, 1.0 * 0.0381, 1.518 / 1000),  # 1.0\" steel tubing with 16 gauge thickness\n    thin_material=Materials.SquareTubing(Materials.MildSteel, 0.75 * 0.0381, 1.518 / 1000)    # .75\" steel tubing with 16 gauge thickness\n    )\n\n    s = StaticSetup()\n    \n    segment_len = width_m / (2*n)\n    \n    top_joint_indices = []\n    for m in range(0, width_m, 2n + 1)\n        j = add_joint!(s, m, height_m)\n        push!(top_joint_indices, j)\n    end\n    \n    bottom_joint_indices = []\n    for m in range(segment_len, width_m - segment_len, n)\n        j = add_joint!(s, m, 0)\n        push!(bottom_joint_indices, j)\n    end\n    \n    top_bar_members = []\n    for i in top_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(top_bar_members, m, thick_material)\n    end\n\n    bottom_bar_members = []\n    for i in bottom_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(bottom_bar_members, m, medium_material)\n    end\n\n    cross_members = []\n    for i in 1:n\n        for j in -1:1\n            m = add_member!(s, bottom_joint_indices[i], top_joint_indices[2*i + j], thin_material)\n            push!(cross_members, m)\n        end\n    end\n\n    return s\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"truss = build_truss(width, height, 3)\nplot_setup(truss)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Looks good! Finally, we want to add constraints to the first and last top member, so that the truss is held essentially by a fixed point and is able to freely expand and contract horizontally under load. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"set_constraint!(s, top_joint_indices[1], AnchorConstraint())\nset_constraint!(s, top_joint_indices[end], XRollerConstraint())","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Finally, we want to add loads to this structure, both from the top_load as well as the weights that the members themselves exert on it. Thankfully, we have the convenience function add_member_weights!(setup) to do this for us. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"SimpleStatics.add_member_weights!(s)\nfor i in top_joint_indices\n    add_force!(s, i, 0, -top_load/length(top_joint_indices)) \nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"We can visualize this final setup function and see that the forces and member weights were all applied. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"function build_truss(width_m, height_m, n, top_load = 0; \n    thick_material=Materials.SquareTubing(Materials.MildSteel, 1.5 * 0.0381, 1.897 / 1000),   # 1.5\" steel tubing with 14 gauge thickness\n    medium_material=Materials.SquareTubing(Materials.MildSteel, 1.0 * 0.0381, 1.518 / 1000),  # 1.0\" steel tubing with 16 gauge thickness\n    thin_material=Materials.SquareTubing(Materials.MildSteel, 0.75 * 0.0381, 1.518 / 1000)    # .75\" steel tubing with 16 gauge thickness\n    )\n\n    s = StaticSetup()\n    \n    segment_len = width_m / (2*n)\n    \n    top_joint_indices = []\n    for m in range(0, width_m, 2n + 1)\n        j = add_joint!(s, m, height_m)\n        push!(top_joint_indices, j)\n    end\n    \n    bottom_joint_indices = []\n    for m in range(segment_len, width_m - segment_len, n)\n        j = add_joint!(s, m, 0)\n        push!(bottom_joint_indices, j)\n    end\n    \n    top_bar_members = []\n    for i in top_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(top_bar_members, m, thick_material)\n    end\n\n    bottom_bar_members = []\n    for i in bottom_joint_indices[1:end-1]\n        m = add_member!(s, i, i+1)\n        push!(bottom_bar_members, m, medium_material)\n    end\n\n    cross_members = []\n    for i in 1:n\n        for j in -1:1\n            m = add_member!(s, bottom_joint_indices[i], top_joint_indices[2*i + j], thin_material)\n            push!(cross_members, m)\n        end\n    end\n    set_constraint!(s, top_joint_indices[1], AnchorConstraint())\n    set_constraint!(s, top_joint_indices[end], XRollerConstraint())\n    \n    SimpleStatics.add_member_weights!(s)\n    # add_force!(s, top_joint_indices[n+1], 0, -top_load) # middle of top bar\n    for i in top_joint_indices\n        add_force!(s, i, 0, -top_load/length(top_joint_indices)) \n    end\n    return s\nend","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"truss = build_truss(width, height, 3)\nplot_setup(truss)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Looks like we're ready to move on!","category":"page"},{"location":"examples/example1/#d1_part2","page":"Example 1","title":"2. Generating some trusses and analyzing their properties.","text":"","category":"section"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Now we can generate a few structures with different values of n, seeing how it affects the weight and strength of our structure.  Lets try n values from 1 to 10 and look at 1, 5, and 10 to see what's going on. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"width = (23 * 12 + 10) * 0.0254 # 23', 10\" long -> Meters\nheight = 18 * 0.0254 # 18\" tall -> Meters\nload = 500 * 0.453592 * 9.81 # lbf -> N, 500 lb load \nnvals = 1:10\ntrusses = [build_truss(width, height, nval, load) for nval in nvals]\n\nplot_setup(trusses[1], dsize=2400)\nplot_setup(trusses[5], dsize=2400)\nplot_setup(trusses[10], dsize=2400)\nplot_setup(trusses[1], dsize=2400) # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[5], dsize=2400) # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[10], dsize=2400) # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"This is in line with what we expected. Lets look at how much each truss weighs. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"mass.(trusses) .* 2.20462  # kg -> lbs","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"And finally we can solve the entire system and visualize the results for a couple structures. This time we'll hide the labels as well to be able to see more clearly. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"displacements = solve_displacements.(trusses)\nforces = solve_member_forces.(trusses, displacements)\nreactions = solve_reaction_forces.(trusses, displacements)\nmember_stresses = solve_member_stresses.(trusses, forces)\n\n\nplot_setup(trusses[1]; displacements=displacements[1], member_forces=forces[1], reactions=reactions[1], draw_labels=false)\nplot_setup(trusses[5]; displacements=displacements[5], member_forces=forces[5], reactions=reactions[5], draw_labels=false)\nplot_setup(trusses[10]; displacements=displacements[10], member_forces=forces[10], reactions=reactions[10], draw_labels=false)\nplot_setup(trusses[1]; displacements=displacements[1], member_forces=forces[1], reactions=reactions[1], draw_labels=false) # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[5]; displacements=displacements[5], member_forces=forces[5], reactions=reactions[5], draw_labels=false) # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[10]; displacements=displacements[10], member_forces=forces[10], reactions=reactions[10], draw_labels=false) # hide","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"The reaction forces quickly become too large to view on screen, but this is simply because the additional cross members make the structure heavier.","category":"page"},{"location":"examples/example1/#d1_part3","page":"Example 1","title":"3. Viewing stresses rather than forces, and identifying weak members.","text":"","category":"section"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Interestingly, we can also view the maximum stress in the structure to see which members are bottlenecking our truss strength. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"tip: Stresses, not forces, are usually what you want to see.\nThe default member property to view in the plot_setup function is force, however, it is often more useful to view stress, which is a better indicator of how close a member is to reaching its yield point, or the stress at which permanent deformation (and therefore damage) to the member begins to occur.","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"This is useful as some members may be under comparitively little force but are very close to their yield point as they are thin, or you may want to identify members that are too thick and can be replaced with thinner materials you have on hand without jeopardizing the strength of the structure. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"max_stresses = maximum.(member_stresses)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"One interesting thing to note in our structure is that we distributed the load perfectly over all the top joints, meaning we accidentally created an edge case where some portion of the load, specifcally (22n+1) of our load, was distributed to constrained joints, which will not affect the system at all. As a consequence, the first three or so trusses actually appear to experience less stress than the trusses with more members. For now, we can ignore this, and look further to looking at stress utilization rather than stress outright. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"max_stresses = maximum.(solve_stress_utilization.(trusses, member_stresses))","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"It looks like this was a non issue for our larger trusses, as we never really end up using more than about 3.5% of our structures strength. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"To visualize this, lets hand member_forces our member_stresses rather than the forces themselves. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[1]; dsize=1000, displacements=displacements[1], member_forces=member_stresses[1], reactions=reactions[1], draw_labels=false)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[5]; dsize=1000, displacements=displacements[5], member_forces=member_stresses[5], reactions=reactions[5], draw_labels=false)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"plot_setup(trusses[10]; dsize=1000, displacements=displacements[10], member_forces=member_stresses[10], reactions=reactions[10], draw_labels=false)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Interesting! So the cross members are under the most stress. This makes sense, as they're made from the thinnest material we had. Note that since stress is the force normalized by the materials cross sectional area, the member highlighting would be the same for either property if all members were the made from the same material. ","category":"page"},{"location":"examples/example1/#d1_part4","page":"Example 1","title":"4. Increasing the load.","text":"","category":"section"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"For the sake of seeing deformations, lets increase the load until we see some interesting changes in our structure. ","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"load = 100000 * 0.453592 * 9.81 # lbf -> N, 100000 lb load \ntr = build_truss(width, height, 5, load)\ndisplacements = solve_displacements(tr)\nforces = solve_member_forces(tr, displacements)\nreactions = solve_reaction_forces(tr, displacements)\nmember_stresses = solve_member_stresses(tr, forces)\nplot_setup(tr; dsize=1000, displacements=displacements, member_forces=member_stresses, reactions=reactions, draw_labels=false)","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"Clearly this would destroy the truss, as we can see the stress utilization:","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"maximum(solve_stress_utilization(tr, member_stresses))","category":"page"},{"location":"examples/example1/","page":"Example 1","title":"Example 1","text":"The cross member is under more then 6x its yield stress. ","category":"page"},{"location":"reference/","page":"Index","title":"Index","text":"","category":"page"},{"location":"reference/","page":"Index","title":"Index","text":"Modules = [SimpleStatics]","category":"page"},{"location":"reference/#SimpleStatics.AnchorConstraint","page":"Index","title":"SimpleStatics.AnchorConstraint","text":"Completely restrictive constraint that restricts all movement. \n\n\n\n\n\n","category":"type"},{"location":"reference/#SimpleStatics.NoConstraint","page":"Index","title":"SimpleStatics.NoConstraint","text":"Default constraint that restricts no movement.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SimpleStatics.UnorderedPair","page":"Index","title":"SimpleStatics.UnorderedPair","text":"Create a pair of items whose order is independent in hashes, equality, and comparisons.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SimpleStatics.XRollerConstraint","page":"Index","title":"SimpleStatics.XRollerConstraint","text":"Restricts movement along the vertical axis only, permitting horizontal movement.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SimpleStatics.YRollerConstraint","page":"Index","title":"SimpleStatics.YRollerConstraint","text":"Restricts movement along the vertical axis only, permitting horizontal movement.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SimpleStatics.add_force!-Tuple{StaticSetup, Integer, SimpleStatics.Vector2D}","page":"Index","title":"SimpleStatics.add_force!","text":"Add a force to the joint, in Newtons.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.add_joint!-Union{Tuple{T}, Tuple{StaticSetup{T}, SimpleStatics.Vector2D{T}}, Tuple{StaticSetup{T}, SimpleStatics.Vector2D{T}, SimpleStatics.StaticConstraint}} where T","page":"Index","title":"SimpleStatics.add_joint!","text":"Add a joint to the setup and return the index referring to that joint. The position should be set in meters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.add_member!-Union{Tuple{T}, Tuple{StaticSetup, Int64, Int64}, Tuple{StaticSetup, Int64, Int64, StaticMaterial{T}}} where T","page":"Index","title":"SimpleStatics.add_member!","text":"Add a member to the setup and return the index referring to that member.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.add_member_weights!-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.add_member_weights!","text":"add_member_weights!(setup::StaticSetup)\n\nAdd the weights that each ALL members exert on the setup as forces to their corresponding nodes.\n\nNote that nothing is checking if this function is being called multiple times, if you accidentally call this function twice, members will just act like they're twice as heavy. \n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.constrained_array-Tuple{AbstractArray, Vector{<:Integer}}","page":"Index","title":"SimpleStatics.constrained_array","text":"Construct a view of an array where constrained indices, indicated by a mapping, are removed. This is useful for solving matrices as zero rows will cause det(M)==0.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.constrained_dof_array_mapping-Tuple{Any}","page":"Index","title":"SimpleStatics.constrained_dof_array_mapping","text":"Find a mapping m[i] -> j where i is the index of a constrained dof array and j is the corresponding index of the unconstrained array.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.dof_indices-Tuple{Integer}","page":"Index","title":"SimpleStatics.dof_indices","text":"Get the indices of the x and y rows, respectively, in a square DOF-like matrix (e.g., global stiffness matrix) for a vertex (joint) index.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.equilibrium_positions-Tuple{StaticSetup, Vector{<:SimpleStatics.Vector2D}}","page":"Index","title":"SimpleStatics.equilibrium_positions","text":"equilibrium_positions(setup, displacements)\n\nGiven a setup and its displacements, calculate the equilibrium positions of all of the joints. Returned indices match joint indices.  \n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.force_vector-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.force_vector","text":"Get a vector of the unconstrained forces in the setup.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.global_stiffness_matrix-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.global_stiffness_matrix","text":"Get the stiffness matrix of the entire setup with respect to the global coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.joint_ids-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.joint_ids","text":"Get an iterator which traverses through all joint ids.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.mass-Tuple{StaticMaterial, Number}","page":"Index","title":"SimpleStatics.mass","text":"Calculate the mass of a material in kg given its length in meters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.mass-Tuple{StaticSetup, Integer}","page":"Index","title":"SimpleStatics.mass","text":"Get the mass, in kg, of a member by its member id.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.member_angle-Tuple{StaticSetup, Int64}","page":"Index","title":"SimpleStatics.member_angle","text":"Get the angle, in radians, the member makes with the global coordinate system's positive X axis.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.member_ids-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.member_ids","text":"Get an iterator which traverses through all member ids.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.member_stiffness_matrix-Tuple{StaticSetup, Any}","page":"Index","title":"SimpleStatics.member_stiffness_matrix","text":"Get the global stiffness matrix for a StaticSetup in Newtons / Meter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.n_dofs-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.n_dofs","text":"Naive number of dergees of freedom in the system (i.e., before constraints).\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.n_joints-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.n_joints","text":"Get the total number of joints.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.n_members-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.n_members","text":"Get the total number of members.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.original_array-Tuple{AbstractArray}","page":"Index","title":"SimpleStatics.original_array","text":"Recover the original array where DOF indices will match with the StaticSetup.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.plot_setup","page":"Index","title":"SimpleStatics.plot_setup","text":"plot_setup(setup, [name]; [dsize=800, padding, displacements, stresses, reactions])\n\nArguments\n\nsetup::StaticSetup: The setup to plot. \nname::String: The filename or path (without extension) of the image to be created. If unspecified, image will be returned but not saved. \ndsize::Integer: The diagonal pixel size of the image. The actual width and height will depend on the setup being plotted. \npadding::Float64: The amount of extra distance to include on the border of the setup boundaries. 0 padding will make the image as small as possible, and you will likely lose details as they go off of the screen. Default is 0.4.\n\nAdditional details that can be included.\n\ndisplacements: Previously calculated displacements using solve_displacements.\nmember_forces: Previously calculated member forces using solve_member_forces.\nreactions: Previously calculated reaction forces using solve_reaction_forces.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleStatics.set_force!-Tuple{StaticSetup, Int64, SimpleStatics.Vector2D}","page":"Index","title":"SimpleStatics.set_force!","text":"Set the force at a joint, in Newtons.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.solve_displacements-Tuple{StaticSetup}","page":"Index","title":"SimpleStatics.solve_displacements","text":"solve_displacements(setup)\n\nSolve the distances that each joint moves to keep the system stationary. The results of this function are necessary for most other properties that can be calculated. \n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.solve_member_forces-Union{Tuple{T}, Tuple{StaticSetup{T}, Vector{<:SimpleStatics.Vector2D}}} where T","page":"Index","title":"SimpleStatics.solve_member_forces","text":"solve_member_forces(setup, displacements)\n\nUsing already calculated displacements, determine the forces in Newtons that each member undergoes when at equilibrium.  Compressive forces are negative and tensile forces are *positive, indexes match member ids.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.solve_member_stresses-Tuple{StaticSetup, AbstractVector}","page":"Index","title":"SimpleStatics.solve_member_stresses","text":"Get the stresses exerted on each member, in Pa. Sign conventions are the same as in solve_member_forces.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.solve_reaction_forces-Union{Tuple{T}, Tuple{StaticSetup{T}, Vector{<:SimpleStatics.Vector2D}}} where T","page":"Index","title":"SimpleStatics.solve_reaction_forces","text":"solve_reaction_forces(setup, displacements)\n\nUsing already calculated displacements, find the forces that each constrained node needs to keep the system stationary. \n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.solve_stress_utilization-Tuple{StaticSetup, AbstractVector}","page":"Index","title":"SimpleStatics.solve_stress_utilization","text":"solve_stress_utilization(setup, stresses)\n\nCalculate how close each member is to its yield strength, where 0 is no stress and 1 is right at the yield point of the member.\n\nStresses can be calculated via solve_member_stresses.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.terminal_joints-Tuple{StaticSetup, Integer}","page":"Index","title":"SimpleStatics.terminal_joints","text":"Get the joints IDs that a member connects, found by its member ID.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.weight-Tuple{StaticMaterial, Number}","page":"Index","title":"SimpleStatics.weight","text":"Calculate how much a given length of the material weighs, in Newtons. Optionally, gravity can be specified in m/s2.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleStatics.weight-Tuple{StaticSetup, Integer}","page":"Index","title":"SimpleStatics.weight","text":"Get the weight, in Newtons, of a member by its member id.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleStatics","category":"page"},{"location":"#SimpleStatics","page":"Home","title":"SimpleStatics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimpleStatics.","category":"page"},{"location":"#What-is-SimpleStatics?","page":"Home","title":"What is SimpleStatics?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SimpleStatics is a package that assists in the computation and visualization of 2D structure stresses and strains. It's geared towards being able to quickly set up, view, and solve statics problems (in that order) while being as easy as possible to learn how to use. ","category":"page"},{"location":"#Who-is-this-package-designed-for?","page":"Home","title":"Who is this package designed for?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The target audience are hobbyists wanting to design and build structures for various purposes, such as greenhouses, a wing for an RC plane, you get the idea. Many concepts in this package are directly implemented from the very good book Matrix Analysis of Structures by Kassimali.","category":"page"},{"location":"#How-do-I-get-started?","page":"Home","title":"How do I get started?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check out the Example Workflow","category":"page"},{"location":"#Where-can-I-find-more-examples?","page":"Home","title":"Where can I find more examples?","text":"","category":"section"},{"location":"#[Example-1-Mild-Steel-Warren-Truss](@ref)","page":"Home","title":"Example 1 - Mild Steel Warren Truss","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A simple truss made from mild steel, where we get to see some significant deformations due to loading.","category":"page"}]
}
